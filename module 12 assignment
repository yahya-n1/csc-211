1. Fibonacci Sequence (Both Recursively and Iteratively)
Recursive Fibonacci Function:
java
Copy
Edit
public class Fibonacci {
   // Recursive Fibonacci function
   public static int fibonacciRecursive(int n) {
      if (n <= 1) {
         return n; // Base case: F(0) = 0, F(1) = 1
      } else {
         return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
      }
   }

   // Iterative Fibonacci function
   public static int fibonacciIterative(int n) {
      if (n <= 1) {
         return n; // Base case
      }
      
      int a = 0, b = 1;
      for (int i = 2; i <= n; i++) {
         int temp = a + b;
         a = b;
         b = temp;
      }
      return b;
   }

   public static void main(String[] args) {
      int n = 10; // Example input

      // Using recursive Fibonacci
      System.out.println("Recursive Fibonacci of " + n + ": " + fibonacciRecursive(n));

      // Using iterative Fibonacci
      System.out.println("Iterative Fibonacci of " + n + ": " + fibonacciIterative(n));
   }
}


2. Decimal to Binary Conversion (Both Recursively and Iteratively)
Recursive Decimal to Binary Function:
java
Copy
Edit
public class DecimalToBinary {
   // Recursive function to convert decimal to binary
   public static void decimalToBinaryRecursive(int n) {
      if (n == 0) {
         return; // Base case
      } else {
         decimalToBinaryRecursive(n / 2); // Recurse with n/2
         System.out.print(n % 2); // Print the current bit (n % 2)
      }
   }

   // Iterative function to convert decimal to binary
   public static String decimalToBinaryIterative(int n) {
      StringBuilder binary = new StringBuilder();
      if (n == 0) {
         binary.append(0);
      }
      while (n > 0) {
         binary.insert(0, n % 2); // Prepend the binary digit
         n = n / 2;
      }
      return binary.toString();
   }

   public static void main(String[] args) {
      int n = 13; // Example input

      // Using recursive method
      System.out.print("Recursive Binary of " + n + ": ");
      decimalToBinaryRecursive(n);
      System.out.println();

      // Using iterative method
      System.out.println("Iterative Binary of " + n + ": " + decimalToBinaryIterative(n));
   }
}
