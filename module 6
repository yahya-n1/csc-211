1. Because Java AWT (Abstract Window Toolkit) depends on the native GUI (Graphical User Interface) components of the underlying operating system, it is regarded as platform-dependent. To put it another way, AWT creates windows, buttons, and other components using the native OS libraries; hence, the look and functionality of these components can differ between platforms such as Windows, macOS, and Linux. The AWT components lack the cross-platform consistency provided by Swing or JavaFX components, which are fully controlled by Java itself, even though Java is platform-independent (thanks to the JVM).
2. The Java Virtual Machine (JVM), a software-based engine that runs Java bytecode, is where Java runs. As a result, Java programs are compiled into bytecode that is independent of platforms, rather than machine code, and may run on any computer that has a JVM installed. This has the primary advantage of portability, which allows you to build a Java application once and run it on any platform, anywhere, without having to modify the code for each platform. A common term for this idea is "write once, run anywhere."
3. The superclass of all other classes in Java is called Object. Accordingly, all Java classes either directly or indirectly derive from the Object class. Because it offers a set of basic methods (such as toString(), equals(), and hashCode()) that are accessible to all Java objects, regardless of their particular class, Object sits at the top of the hierarchy. This guarantees a consistent method of interacting with objects at a very fundamental level.
4. Code management and organization are facilitated by grouping related classes and interfaces into Java packages. Namespaces are provided by packages to prevent conflicts between class names, particularly in large-scale projects. Packages can also be used for encapsulation and access control. For instance, utility classes like ArrayList and HashMap are found in the java.util package.
5. An event in Java is a phenomenon that denotes a system action or human interaction, like a mouse click, keyboard key, or window resizing. Java employs the event-driven programming paradigm, in which program operations are triggered by events and are typically managed by event listeners. When a user hits a button on a graphical user interface (GUI), for instance, this action represents an event, and the software can react to it by using an event listener (such as ActionListener).
6.
import java.awt.*;
import java.awt.event.*;

public class EmployeeInfoForm extends Frame implements ActionListener {
    // Creating labels, text fields, and button
    Label nameLabel, idLabel, deptLabel;
    TextField nameText, idText, deptText;
    Button submitButton;
    TextArea displayArea;

    // Constructor to set up the form
    public EmployeeInfoForm() {
        // Set the frame title and layout
        setTitle("Employee Information Form");
        setLayout(new FlowLayout());

        // Create labels and text fields
        nameLabel = new Label("Name:");
        idLabel = new Label("Employee ID:");
        deptLabel = new Label("Department:");

        nameText = new TextField(20);
        idText = new TextField(20);
        deptText = new TextField(20);

        // Create a submit button
        submitButton = new Button("Submit");
        submitButton.addActionListener(this); // Register event listener

        // Create a TextArea to display the submitted information
        displayArea = new TextArea(5, 40);
        displayArea.setEditable(false); // Make it non-editable

        // Add components to the frame
        add(nameLabel);
        add(nameText);
        add(idLabel);
        add(idText);
        add(deptLabel);
        add(deptText);
        add(submitButton);
        add(displayArea);

        // Set frame size and make it visible
        setSize(400, 300);
        setVisible(true);
    }

    // Event handler for button click
    @Override
    public void actionPerformed(ActionEvent e) {
        // Get the user input from the text fields
        String name = nameText.getText();
        String id = idText.getText();
        String department = deptText.getText();

        // Display the entered details in the TextArea
        displayArea.setText("Employee Name: " + name + "\n" +
                            "Employee ID: " + id + "\n" +
                            "Department: " + department);
    }

    // Main method to run the program
    public static void main(String[] args) {
        new EmployeeInfoForm(); // Create an instance of the form
    }
}





