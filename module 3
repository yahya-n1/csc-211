Notes about JavaFX: Overview of JavaFX

For GUI development, Java SE replaces Swing.
part of Java's development.
utilized when developing enterprise application user interfaces.
Essential Ideas in JavaFX:

FXML: Disentangles application logic from user interface design.
Lines and forms are drawn using 2D Class Objects.
Effects & Interactivity: Enhancing graphical user interfaces with animation, charts, graphics, and effects.
CSS Integration: Use CSS to personalize JavaFX interface designs.
Learning Goals Using JavaFX:

JavaFX: What is it?
building a basic JavaFX application.
illustrating words, shapes, and lines.
Adding effects.
Charts and graphics can be added and animated.
using CSS to modify interfaces.
Notes for Swing:
Overview of Swing:

A Java application graphical user interface (GUI) builder.
aids in the Java GUI creation process.
Important Ideas in Swing:
Application functionality and user interface are separated by the MVC architecture design pattern.
WYSIWYG Editor: This interface design editor lets you see what you see.
The fundamentals of arranging and showcasing user interface elements are containers, components, and layouts.
Events: The user's interaction with the UI.
Swing Learning Objectives:

Swing fundamentals and from the ground up.
MVC design.
Panels and frames: Put the window in order.
Swing elements and designs: components that make up a GUI.
toolbars and menus.
Events that swing: Respond to user input, such as keystrokes or clicks.
Managing events: How to react to input from the user.






2. What is encapsulation?
Encapsulation is an important notion in object-oriented programming. It refers to the concept of restricting access to specific areas of an entity while only delivering relevant information.
Purpose: It secures the object's internal state by limiting access to public methods.
For example, if your class has private fields such as balance, you can only access them through a public method, not directly.

3. What is a null reference, and what is the issue with it?
A null reference is formed when an object is declared but not initialized, or when it is explicitly assigned a null value. It indicates that the item does not point to a memory address with valid data.
Problem: Trying to access methods or attributes of a null object throws a NullPointerException (in Java). This exception terminates the application and prevents further execution; hence, always check whether an object is null before interacting with it.

4. Difference Between Inheritance and Composition

Inheritance allows subclasses to inherit the characteristics and functions of their superclasses.
It refers to a "is-a" relationship. For example, because a dog is a mammal, the Dog class can inherit from the Mammals class.

Composition: A class that contains instances of other classes as members. This describes a "has-a" relationship. For example, a vehicle has an engine.

Example: class. Car inheritance refers to hierarchical relationships, while composition combines fundamental components to build complex ones.


5. 
// Base Class: Automobile
public class Automobile implements Comparable<Automobile> {
    private int modelYear;
    private String brand;

    // Constructor
    public Automobile(int modelYear, String brand) {
        this.modelYear = modelYear;
        this.brand = brand;
    }

    // Methods
    public void honk() {
        System.out.println("Honk! Honk!");
    }

    // Getters and Setters
    public int getModelYear() {
        return modelYear;
    }

    public String getBrand() {
        return brand;
    }

    // compareTo method for Comparable interface
    @Override
    public int compareTo(Automobile other) {
        return Integer.compare(this.modelYear, other.modelYear);
    }

    // toString method
    @Override
    public String toString() {
        return "Automobile [Model Year=" + modelYear + ", Brand=" + brand + "]";
    }

    // equals method
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Automobile that = (Automobile) obj;
        return modelYear == that.modelYear && brand.equals(that.brand);
    }
}

// Subclass: Car
class Car extends Automobile {
    public Car(int modelYear, String brand) {
        super(modelYear, brand);
    }

    // Additional Methods
    public void accelerate() {
        System.out.println("Car is accelerating!");
    }

    public void stop() {
        System.out.println("Car is stopping.");
    }

    public void reverse() {
        System.out.println("Car is reversing.");
    }
}

// Subclass: SportsCar
class SportsCar extends Automobile {
    public SportsCar(int modelYear, String brand) {
        super(modelYear, brand);
    }

    // Additional Methods
    @Override
    public void accelerate() {
        System.out.println("SportsCar is speeding up!");
    }

    public void drift() {
        System.out.println("SportsCar is drifting!");
    }
}

// Subclass: JunkCar
class JunkCar extends Automobile {
    public JunkCar(int modelYear, String brand) {
        super(modelYear, brand);
    }

    // Additional Methods
    @Override
    public void accelerate() {
        System.out.println("JunkCar struggles to accelerate.");
    }

    public void breakDown() {
        System.out.println("JunkCar is breaking down!");
    }
}

// Tester Class
public class Tester {
    public static void main(String[] args) {
        // Create instances of different types of automobiles
        Automobile car = new Car(2020, "Toyota");
        Automobile sportsCar = new SportsCar(2022, "Ferrari");
        Automobile junkCar = new JunkCar(2000, "Oldsmobile");

        // Array of automobiles
        Automobile[] automobiles = {car, sportsCar, junkCar};

        // Testing methods
        for (Automobile automobile : automobiles) {
            System.out.println(automobile); // Calls toString method
            automobile.honk();
            if (automobile instanceof Car) {
                ((Car) automobile).accelerate();
            }
            if (automobile instanceof SportsCar) {
                ((SportsCar) automobile).drift();
            }
            if (automobile instanceof JunkCar) {
                ((JunkCar) automobile).breakDown();
            }
            System.out.println();
        }
    }
}




